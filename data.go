package main

import "time"

type mergeRequests struct {
	ID             int         `json:"id"`
	Iid            int         `json:"iid"`
	ProjectID      int         `json:"project_id"`
	Title          string      `json:"title"`
	Description    interface{} `json:"description"`
	State          string      `json:"state"`
	CreatedAt      time.Time   `json:"created_at"`
	UpdatedAt      time.Time   `json:"updated_at"`
	MergedBy       interface{} `json:"merged_by"`
	MergedAt       interface{} `json:"merged_at"`
	ClosedBy       interface{} `json:"closed_by"`
	ClosedAt       interface{} `json:"closed_at"`
	TargetBranch   string      `json:"target_branch"`
	SourceBranch   string      `json:"source_branch"`
	UserNotesCount int         `json:"user_notes_count"`
	Upvotes        int         `json:"upvotes"`
	Downvotes      int         `json:"downvotes"`
	Assignee       interface{} `json:"assignee"`
	Author         struct {
		ID        int    `json:"id"`
		Name      string `json:"name"`
		Username  string `json:"username"`
		State     string `json:"state"`
		AvatarURL string `json:"avatar_url"`
		WebURL    string `json:"web_url"`
	} `json:"author"`
	Assignees                 []interface{} `json:"assignees"`
	SourceProjectID           int           `json:"source_project_id"`
	TargetProjectID           int           `json:"target_project_id"`
	Labels                    []interface{} `json:"labels"`
	WorkInProgress            bool          `json:"work_in_progress"`
	Milestone                 interface{}   `json:"milestone"`
	MergeWhenPipelineSucceeds bool          `json:"merge_when_pipeline_succeeds"`
	MergeStatus               string        `json:"merge_status"`
	Sha                       string        `json:"sha"`
	MergeCommitSha            interface{}   `json:"merge_commit_sha"`
	SquashCommitSha           interface{}   `json:"squash_commit_sha"`
	DiscussionLocked          interface{}   `json:"discussion_locked"`
	ShouldRemoveSourceBranch  interface{}   `json:"should_remove_source_branch"`
	ForceRemoveSourceBranch   interface{}   `json:"force_remove_source_branch"`
	Reference                 string        `json:"reference"`
	References                struct {
		Short    string `json:"short"`
		Relative string `json:"relative"`
		Full     string `json:"full"`
	} `json:"references"`
	WebURL    string `json:"web_url"`
	TimeStats struct {
		TimeEstimate        int         `json:"time_estimate"`
		TotalTimeSpent      int         `json:"total_time_spent"`
		HumanTimeEstimate   interface{} `json:"human_time_estimate"`
		HumanTotalTimeSpent interface{} `json:"human_total_time_spent"`
	} `json:"time_stats"`
	Squash               bool `json:"squash"`
	TaskCompletionStatus struct {
		Count          int `json:"count"`
		CompletedCount int `json:"completed_count"`
	} `json:"task_completion_status"`
	HasConflicts                bool        `json:"has_conflicts"`
	BlockingDiscussionsResolved bool        `json:"blocking_discussions_resolved"`
	ApprovalsBeforeMerge        interface{} `json:"approvals_before_merge"`
	Subscribed                  bool        `json:"subscribed"`
	ChangesCount                interface{} `json:"changes_count"`
	LatestBuildStartedAt        interface{} `json:"latest_build_started_at"`
	LatestBuildFinishedAt       interface{} `json:"latest_build_finished_at"`
	FirstDeployedToProductionAt interface{} `json:"first_deployed_to_production_at"`
	Pipeline                    interface{} `json:"pipeline"`
	HeadPipeline                interface{} `json:"head_pipeline"`
	DiffRefs                    struct {
		BaseSha  string `json:"base_sha"`
		HeadSha  string `json:"head_sha"`
		StartSha string `json:"start_sha"`
	} `json:"diff_refs"`
	MergeError interface{} `json:"merge_error"`
	User       struct {
		CanMerge bool `json:"can_merge"`
	} `json:"user"`
}

type Project struct {
	ID                             int         `json:"id"`
	WebURL                         string      `json:"web_url"`
	Name                           string      `json:"name"`
	Path                           string      `json:"path"`
	Description                    string      `json:"description"`
	Visibility                     string      `json:"visibility"`
	ShareWithGroupLock             bool        `json:"share_with_group_lock"`
	RequireTwoFactorAuthentication bool        `json:"require_two_factor_authentication"`
	TwoFactorGracePeriod           int         `json:"two_factor_grace_period"`
	ProjectCreationLevel           string      `json:"project_creation_level"`
	AutoDevopsEnabled              interface{} `json:"auto_devops_enabled"`
	SubgroupCreationLevel          string      `json:"subgroup_creation_level"`
	EmailsDisabled                 interface{} `json:"emails_disabled"`
	MentionsDisabled               interface{} `json:"mentions_disabled"`
	LfsEnabled                     bool        `json:"lfs_enabled"`
	DefaultBranchProtection        int         `json:"default_branch_protection"`
	AvatarURL                      interface{} `json:"avatar_url"`
	RequestAccessEnabled           bool        `json:"request_access_enabled"`
	FullName                       string      `json:"full_name"`
	FullPath                       string      `json:"full_path"`
	CreatedAt                      time.Time   `json:"created_at"`
	ParentID                       int         `json:"parent_id"`
	LdapCn                         interface{} `json:"ldap_cn"`
	LdapAccess                     interface{} `json:"ldap_access"`
	RunnersToken                   string      `json:"runners_token"`
	Projects                       []struct {
		ID                int           `json:"id"`
		Description       string        `json:"description"`
		Name              string        `json:"name"`
		NameWithNamespace string        `json:"name_with_namespace"`
		Path              string        `json:"path"`
		PathWithNamespace string        `json:"path_with_namespace"`
		CreatedAt         time.Time     `json:"created_at"`
		DefaultBranch     string        `json:"default_branch"`
		TagList           []interface{} `json:"tag_list"`
		SSHURLToRepo      string        `json:"ssh_url_to_repo"`
		HTTPURLToRepo     string        `json:"http_url_to_repo"`
		WebURL            string        `json:"web_url"`
		ReadmeURL         string        `json:"readme_url"`
		AvatarURL         interface{}   `json:"avatar_url"`
		StarCount         int           `json:"star_count"`
		ForksCount        int           `json:"forks_count"`
		LastActivityAt    time.Time     `json:"last_activity_at"`
		Namespace         struct {
			ID        int         `json:"id"`
			Name      string      `json:"name"`
			Path      string      `json:"path"`
			Kind      string      `json:"kind"`
			FullPath  string      `json:"full_path"`
			ParentID  int         `json:"parent_id"`
			AvatarURL interface{} `json:"avatar_url"`
			WebURL    string      `json:"web_url"`
		} `json:"namespace"`
		Links struct {
			Self          string `json:"self"`
			Issues        string `json:"issues"`
			MergeRequests string `json:"merge_requests"`
			RepoBranches  string `json:"repo_branches"`
			Labels        string `json:"labels"`
			Events        string `json:"events"`
			Members       string `json:"members"`
		} `json:"_links"`
		EmptyRepo                      bool   `json:"empty_repo"`
		Archived                       bool   `json:"archived"`
		Visibility                     string `json:"visibility"`
		ResolveOutdatedDiffDiscussions bool   `json:"resolve_outdated_diff_discussions"`
		ContainerRegistryEnabled       bool   `json:"container_registry_enabled"`
		ContainerExpirationPolicy      struct {
			Cadence       string      `json:"cadence"`
			Enabled       bool        `json:"enabled"`
			KeepN         int         `json:"keep_n"`
			OlderThan     string      `json:"older_than"`
			NameRegex     interface{} `json:"name_regex"`
			NameRegexKeep interface{} `json:"name_regex_keep"`
			NextRunAt     time.Time   `json:"next_run_at"`
		} `json:"container_expiration_policy,omitempty"`
		IssuesEnabled                             bool          `json:"issues_enabled"`
		MergeRequestsEnabled                      bool          `json:"merge_requests_enabled"`
		WikiEnabled                               bool          `json:"wiki_enabled"`
		JobsEnabled                               bool          `json:"jobs_enabled"`
		SnippetsEnabled                           bool          `json:"snippets_enabled"`
		CanCreateMergeRequestIn                   bool          `json:"can_create_merge_request_in"`
		IssuesAccessLevel                         string        `json:"issues_access_level"`
		RepositoryAccessLevel                     string        `json:"repository_access_level"`
		MergeRequestsAccessLevel                  string        `json:"merge_requests_access_level"`
		ForkingAccessLevel                        string        `json:"forking_access_level"`
		WikiAccessLevel                           string        `json:"wiki_access_level"`
		BuildsAccessLevel                         string        `json:"builds_access_level"`
		SnippetsAccessLevel                       string        `json:"snippets_access_level"`
		PagesAccessLevel                          string        `json:"pages_access_level"`
		EmailsDisabled                            interface{}   `json:"emails_disabled"`
		SharedRunnersEnabled                      bool          `json:"shared_runners_enabled"`
		LfsEnabled                                bool          `json:"lfs_enabled"`
		CreatorID                                 int           `json:"creator_id"`
		ImportStatus                              string        `json:"import_status"`
		OpenIssuesCount                           int           `json:"open_issues_count"`
		CiDefaultGitDepth                         int           `json:"ci_default_git_depth"`
		PublicJobs                                bool          `json:"public_jobs"`
		BuildTimeout                              int           `json:"build_timeout"`
		AutoCancelPendingPipelines                string        `json:"auto_cancel_pending_pipelines"`
		BuildCoverageRegex                        interface{}   `json:"build_coverage_regex"`
		CiConfigPath                              string        `json:"ci_config_path"`
		SharedWithGroups                          []interface{} `json:"shared_with_groups"`
		OnlyAllowMergeIfPipelineSucceeds          bool          `json:"only_allow_merge_if_pipeline_succeeds"`
		RequestAccessEnabled                      bool          `json:"request_access_enabled"`
		OnlyAllowMergeIfAllDiscussionsAreResolved bool          `json:"only_allow_merge_if_all_discussions_are_resolved"`
		RemoveSourceBranchAfterMerge              bool          `json:"remove_source_branch_after_merge"`
		PrintingMergeRequestLinkEnabled           bool          `json:"printing_merge_request_link_enabled"`
		MergeMethod                               string        `json:"merge_method"`
		SuggestionCommitMessage                   interface{}   `json:"suggestion_commit_message"`
		AutoDevopsEnabled                         bool          `json:"auto_devops_enabled"`
		AutoDevopsDeployStrategy                  string        `json:"auto_devops_deploy_strategy"`
		AutocloseReferencedIssues                 bool          `json:"autoclose_referenced_issues"`
		ExternalAuthorizationClassificationLabel  string        `json:"external_authorization_classification_label"`
	} `json:"projects"`
	SharedProjects                 []interface{} `json:"shared_projects"`
	SharedRunnersMinutesLimit      interface{}   `json:"shared_runners_minutes_limit"`
	ExtraSharedRunnersMinutesLimit interface{}   `json:"extra_shared_runners_minutes_limit"`
}